// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonWriteClient is the client API for PersonWrite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonWriteClient interface {
	NewPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Empty, error)
}

type personWriteClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonWriteClient(cc grpc.ClientConnInterface) PersonWriteClient {
	return &personWriteClient{cc}
}

func (c *personWriteClient) NewPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.PersonWrite/NewPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonWriteServer is the server API for PersonWrite service.
// All implementations must embed UnimplementedPersonWriteServer
// for forward compatibility
type PersonWriteServer interface {
	NewPerson(context.Context, *Person) (*Empty, error)
	mustEmbedUnimplementedPersonWriteServer()
}

// UnimplementedPersonWriteServer must be embedded to have forward compatible implementations.
type UnimplementedPersonWriteServer struct {
}

func (UnimplementedPersonWriteServer) NewPerson(context.Context, *Person) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPerson not implemented")
}
func (UnimplementedPersonWriteServer) mustEmbedUnimplementedPersonWriteServer() {}

// UnsafePersonWriteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonWriteServer will
// result in compilation errors.
type UnsafePersonWriteServer interface {
	mustEmbedUnimplementedPersonWriteServer()
}

func RegisterPersonWriteServer(s grpc.ServiceRegistrar, srv PersonWriteServer) {
	s.RegisterService(&PersonWrite_ServiceDesc, srv)
}

func _PersonWrite_NewPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonWriteServer).NewPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersonWrite/NewPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonWriteServer).NewPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonWrite_ServiceDesc is the grpc.ServiceDesc for PersonWrite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonWrite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersonWrite",
	HandlerType: (*PersonWriteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewPerson",
			Handler:    _PersonWrite_NewPerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

// PersonReadClient is the client API for PersonRead service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonReadClient interface {
	GetPerson(ctx context.Context, in *PersonId, opts ...grpc.CallOption) (*Person, error)
}

type personReadClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonReadClient(cc grpc.ClientConnInterface) PersonReadClient {
	return &personReadClient{cc}
}

func (c *personReadClient) GetPerson(ctx context.Context, in *PersonId, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/proto.PersonRead/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonReadServer is the server API for PersonRead service.
// All implementations must embed UnimplementedPersonReadServer
// for forward compatibility
type PersonReadServer interface {
	GetPerson(context.Context, *PersonId) (*Person, error)
	mustEmbedUnimplementedPersonReadServer()
}

// UnimplementedPersonReadServer must be embedded to have forward compatible implementations.
type UnimplementedPersonReadServer struct {
}

func (UnimplementedPersonReadServer) GetPerson(context.Context, *PersonId) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonReadServer) mustEmbedUnimplementedPersonReadServer() {}

// UnsafePersonReadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonReadServer will
// result in compilation errors.
type UnsafePersonReadServer interface {
	mustEmbedUnimplementedPersonReadServer()
}

func RegisterPersonReadServer(s grpc.ServiceRegistrar, srv PersonReadServer) {
	s.RegisterService(&PersonRead_ServiceDesc, srv)
}

func _PersonRead_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonReadServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersonRead/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonReadServer).GetPerson(ctx, req.(*PersonId))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonRead_ServiceDesc is the grpc.ServiceDesc for PersonRead service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonRead_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersonRead",
	HandlerType: (*PersonReadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _PersonRead_GetPerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
